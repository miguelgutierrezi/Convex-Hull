#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{algorithm, algpseudocode}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "" "default"
\font_sans "" "default"
\font_typewriter "" "default"
\font_math "" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1.5cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Taller 4: Geometría Computacional: Cascos Convexos
\end_layout

\begin_layout Author
Miguel Ángel Gutiérrez Ibagué - Juan Sebastián Bastos Cruz
\end_layout

\begin_layout Abstract
El siguiente documento contiene el desarrollo de los algoritmos para calcular
 cascos convexos de manera diferente.
 En primer lugar encontramos el algoritmo incremental, en segundo lugar
 el algoritmo basado en la técnica de dividir y vencer, y, finalmente el
 algoritmo conocido como Jarvis - March, o de Wrapping.
\end_layout

\begin_layout Section*
Manual del usuario
\end_layout

\begin_layout Paragraph*
A continuación se mostrarán los pasos para compilar los códigos de cascos
 convexos:
\end_layout

\begin_layout Standard
Inicialmente debemos hacer claridad en que los párametros usados por los
 3 algoritmos son los siguientes:
\end_layout

\begin_layout Standard
- n: Cantidad de puntos a generar
\end_layout

\begin_layout Standard
- t: Tipo de distribución, 'e' para una distribución elíptica, y 'r' para
 una distribución rectangular.
\end_layout

\begin_layout Standard
- a: En un rectángulo representa el tamaño, y en una elipse representa el
 diámetro.
\end_layout

\begin_layout Standard
- b: Representa la altura,
\end_layout

\begin_layout Standard
- r: Representa el ángulo de inclinación.
\end_layout

\begin_layout Enumerate
Para el algoritmo de metodología incremental se ejecutará de la siguiente
 manera: python 
\noun on
incremental_hull.py n t a b r
\end_layout

\begin_layout Enumerate
Para el algoritmo de metodología dividir y vencer se ejecutará de la siguiente
 manera: python 
\noun on
dc_hull.py n t a b r
\end_layout

\begin_layout Enumerate
Para el algoritmo de Jarvis - March se ejecutará de la siguiente manera:
 python 
\noun on
jarvis_hull.py n t a b r
\end_layout

\begin_layout Section
Formalización del problema
\end_layout

\begin_layout Paragraph*
Dado un conjunto 
\begin_inset Formula $\beta$
\end_inset

 de n puntos diferentes repartidos en una distribución elíptica o rectangular.
 Se espera retornar el casco convexo más pequeño que pueda contener todos
 los puntos contenidos en el conjunto 
\begin_inset Formula $\beta$
\end_inset

.
\end_layout

\begin_layout Section
Formalización del algoritmo:
\end_layout

\begin_layout Subsection
Entradas:
\end_layout

\begin_layout Subparagraph*
- Un conjunto 
\begin_inset Formula $\beta$
\end_inset

 de n puntos distintos repartidos en una distribución elíptica o rectangular
 definida de la siguiente manera: 
\end_layout

\begin_layout Standard
\begin_inset Formula $\beta=\left\langle \left(s_{i},s_{j}\right):i\in\left\{ 1..n\right\} \land j\in\left\{ 1..n\right\} \subset\mathbb{\mathbb{R}}\right\rangle $
\end_inset


\end_layout

\begin_layout Subparagraph*
- Un cáracter t que indica la distribución elíptica o rectangular que se
 utilizará.
 
\end_layout

\begin_layout Subparagraph*
- Un entero n que contiene la cantidad de puntos que se encontrarán dentro
 la distribución.
\end_layout

\begin_layout Subparagraph*
- Un entero a que indica el tamaño del rectángulo, o, el diámetro de la
 elipse.
\end_layout

\begin_layout Subparagraph*
- Un entero b que indica la altura de la distribución.
\end_layout

\begin_layout Subparagraph*
- Un entero r que indica el grado de inclinación de la figura.
\end_layout

\begin_layout Subsection
Salidas:
\end_layout

\begin_layout Paragraph
El conjunto 
\begin_inset Formula $\gamma$
\end_inset

 que representa el Casco Convexo más pequeño de m puntos diferentes que
 contenga el conjunto 
\begin_inset Formula $\beta$
\end_inset

 de puntos enunciado en las entradas.
\end_layout

\begin_layout Standard
\begin_inset Formula $\gamma=\left\langle \left(s_{i},s_{j}\right):i\in\left\{ 1..n\right\} \land j\in\left\{ 1..n\right\} \subset\mathbb{\mathbb{R}}\right\rangle |\beta\subseteq\gamma$
\end_inset


\end_layout

\begin_layout Section
Observaciones
\end_layout

\begin_layout Itemize
Cuando 
\begin_inset Formula $n<3$
\end_inset

 implica que no existe ningún casco convexo, esto debido a que no hay puntos
 suficientes que permitan generar un polígono que cumpla con las condiciones
 de un caso convexo.
\end_layout

\begin_layout Itemize
Cuando 
\begin_inset Formula $n\geq3$
\end_inset

 existe un casco convexo y puede hallarse utilizando cualquiera de los algoritmo
s mencionados previamente.
\end_layout

\begin_layout Section
Escritura del algoritmo
\end_layout

\begin_layout Subsection
Algoritmo Incremental
\end_layout

\begin_layout Subsubsection
Pseudocódigo
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Incremental Hull
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{pointsRightTurn}{p1, p2, p3}
\end_layout

\begin_layout Plain Layout


\backslash
State x1 $
\backslash
leftarrow$ p1.x $-$ p2.x
\end_layout

\begin_layout Plain Layout


\backslash
State x2 $
\backslash
leftarrow$ p1.x $-$ p3.x
\end_layout

\begin_layout Plain Layout


\backslash
State y1 $
\backslash
leftarrow$ p1.y $-$ p2.y
\end_layout

\begin_layout Plain Layout


\backslash
State y2 $
\backslash
leftarrow$ p1.y $-$ p3.y
\end_layout

\begin_layout Plain Layout


\backslash
State total $
\backslash
leftarrow$ y2 $*$ x1 $-$ y1 $*$ x2
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} total
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{incrementalHull}{Points}
\end_layout

\begin_layout Plain Layout


\backslash
State Points $
\backslash
leftarrow$ sortByXAxis(Points)
\end_layout

\begin_layout Plain Layout


\backslash
State Lupper = []
\end_layout

\begin_layout Plain Layout


\backslash
State Lupper.append(Points[1])
\end_layout

\begin_layout Plain Layout


\backslash
State Lupper.append(Points[2])
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 3$ $
\backslash
textbf(to)$ $|$Points$|$}
\end_layout

\begin_layout Plain Layout


\backslash
State Lupper.append(Points[i])
\end_layout

\begin_layout Plain Layout


\backslash
While {|Lupper|$>$2 and pointsRightTurn(Lupper[|Lupper|-2],Lupper[|Lupper|-1],Lu
pper[|Lupper|])}
\end_layout

\begin_layout Plain Layout


\backslash
State Lupper.pop(|Lupper|-1)
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State Llower = []
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.append(|Points|)
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.append(|Points|-1)
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow |Points|$ $downto$ 1}
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.append(Points[i])
\end_layout

\begin_layout Plain Layout


\backslash
While {|Llower|$>$2 and pointsRightTurn(Llower[|Llower|-2],Llower[|Llower|-1],Ll
ower[|Llower|])}
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.pop(|Llower|-1)
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.pop(0)
\end_layout

\begin_layout Plain Layout


\backslash
State Llower.pop(|Llower|)
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ Llower $+$ Lupper
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} hull
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Invariante
\end_layout

\begin_layout Paragraph*
Dado que es un algoritmo de Dynamic Programming, su invariante siempre será
 la misma, está consta de que, al realizar los cálculos y almacenarlos en
 una tabla con la información.
 Esto nos garantiza que, para realizar el cálculo del valor actual, ya se
 contará con los anteriores, por lo tanto se optimizará el tiempo de ejecución
 del código.
\end_layout

\begin_layout Subsubsection
Análisis de Complejidad
\end_layout

\begin_layout Subsubsection
Análisis de resultados
\end_layout

\begin_layout Itemize
En este caso particular, se obtiene una complejidad de 
\begin_inset Formula $O(n^{2})$
\end_inset

 tanto para el algoritmo de memoización como de Bottom-up.
 Sin embargo, por cuestión de optimización de recursos, es preferible el
 uso del código Bottom-up, puesto que, hace un menor uso de memoria, dado
 que su funcionamiento de basa en el uso de accesos a la tabla.
 Y, por lo tanto, se genera una mayor eficiencia en la ejecución del algoritmo.
\end_layout

\begin_layout Itemize
Se verifica que el código realizado en Programación Dinámica es más eficiente
 que el código de fuerza bruta y memoizado.
 Esto se comprueba a partir de las pruebas realizadas y la obtención de
 mejores tiempos y resultados en la ejecución del código.
\end_layout

\begin_layout Subsection
Algoritmo Divide y Conquista
\end_layout

\begin_layout Subsubsection
Pseudocódigo
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
DC Hull
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{DCHull}{Points}
\end_layout

\begin_layout Plain Layout


\backslash
State (minimum, maximum) $
\backslash
leftarrow$ extremePoints(Points)
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ subHull(minimum, maximum, points)
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ hull $+$ subHull(maximum, minimum, points)
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} hull
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{subHull}{a, b, S}
\end_layout

\begin_layout Plain Layout


\backslash
State S $
\backslash
leftarrow$ leftPoints(a, b, S)
\end_layout

\begin_layout Plain Layout


\backslash
State c $
\backslash
leftarrow$ farthestPoint(a, b, S)
\end_layout

\begin_layout Plain Layout


\backslash
If {c $==$ None}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} [b]
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ subHull(a, c, S)
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ hull $+$ subHull(c, b, S)
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} hull
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{extremePoints}{points}
\end_layout

\begin_layout Plain Layout


\backslash
State minimum $
\backslash
leftarrow$ $
\backslash
infty$
\end_layout

\begin_layout Plain Layout


\backslash
State maximum $
\backslash
leftarrow$ $-
\backslash
infty$
\end_layout

\begin_layout Plain Layout


\backslash
State posMax $
\backslash
leftarrow$ 0
\end_layout

\begin_layout Plain Layout


\backslash
State posMin $
\backslash
leftarrow$ 0
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 1$ $
\backslash
textbf(to)$ $|$Points$|$}
\end_layout

\begin_layout Plain Layout


\backslash
If {points[i].y $>$ maximum}
\end_layout

\begin_layout Plain Layout


\backslash
State maximum $
\backslash
leftarrow$ points[i].y
\end_layout

\begin_layout Plain Layout


\backslash
State posMax $
\backslash
leftarrow$ i
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
If {points[i].y $<$ minimum}
\end_layout

\begin_layout Plain Layout


\backslash
State minimum $
\backslash
leftarrow$ points[i].y
\end_layout

\begin_layout Plain Layout


\backslash
State posMin $
\backslash
leftarrow$ i
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} (points[posMin], points[posMax])
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{leftPoints}{s, e, points}
\end_layout

\begin_layout Plain Layout


\backslash
State left $
\backslash
leftarrow$ []
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 1$ $
\backslash
textbf(to)$ $|$Points$|$}
\end_layout

\begin_layout Plain Layout


\backslash
If {pointOp(s, e, points[i]) == 2}
\end_layout

\begin_layout Plain Layout


\backslash
State left.append(points[i])
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} left
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{pointOp}{p1, p2, p3}
\end_layout

\begin_layout Plain Layout


\backslash
State val $
\backslash
leftarrow$ (p2.y $-$ p1.y) $*$ (p3.x $-$ p2.x) $-$ (p2.x $-$ p1.x) $*$ (p3.y $-$
 p2.y)
\end_layout

\begin_layout Plain Layout


\backslash
If {val $==$ 0}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 0
\end_layout

\begin_layout Plain Layout


\backslash
ElsIf {val $>$ 0}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 1
\end_layout

\begin_layout Plain Layout


\backslash
Else
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 2
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Algoritmos de ayuda
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{farthestPoint}{s, e, points}
\end_layout

\begin_layout Plain Layout


\backslash
State maximum $
\backslash
leftarrow$ $-
\backslash
infty$
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 1$ $
\backslash
textbf(to)$ $|$Points$|$}
\end_layout

\begin_layout Plain Layout


\backslash
If {points[i] $!=$ s and points[i] $!=$ e}
\end_layout

\begin_layout Plain Layout


\backslash
State dist $
\backslash
leftarrow$ distance(s, e, points[i])
\end_layout

\begin_layout Plain Layout


\backslash
If {dist $>$ maximum}
\end_layout

\begin_layout Plain Layout


\backslash
State maximum $
\backslash
leftarrow$ dist
\end_layout

\begin_layout Plain Layout


\backslash
State maxP $
\backslash
leftarrow$ points[i]
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
If {maximum $!=$ $-
\backslash
infty$}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} maxP
\end_layout

\begin_layout Plain Layout


\backslash
Else
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} None
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{distance}{start, end, point}
\end_layout

\begin_layout Plain Layout


\backslash
State nom $
\backslash
leftarrow$ abs((end.y $-$ start.y) $*$ point.x $-$ (end.x $-$ start.x) $*$ point.y
 $+$ endx $*$ start.y $-$ end.y $*$ start.x)
\end_layout

\begin_layout Plain Layout


\backslash
State denom $
\backslash
leftarrow$ ((end.y $-$ start.y) $**$ 2 $+$ (end.x $-$ start.x) $**$ 2) $**$
 0.5
\end_layout

\begin_layout Plain Layout


\backslash
State result $
\backslash
leftarrow$ nom $/$ denom
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} result
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Invariante
\end_layout

\begin_layout Paragraph*
Dado que es un algoritmo de Dynamic Programming, su invariante siempre será
 la misma, está consta de que, al realizar los cálculos y almacenarlos en
 una tabla con la información.
 Esto nos garantiza que, para realizar el cálculo del valor actual, ya se
 contará con los anteriores, por lo tanto se optimizará el tiempo de ejecución
 del código.
\end_layout

\begin_layout Subsubsection
Análisis de Complejidad
\end_layout

\begin_layout Subsubsection
Análisis de resultados
\end_layout

\begin_layout Itemize
En este caso particular, se obtiene una complejidad de 
\begin_inset Formula $O(n^{2})$
\end_inset

 tanto para el algoritmo de memoización como de Bottom-up.
 Sin embargo, por cuestión de optimización de recursos, es preferible el
 uso del código Bottom-up, puesto que, hace un menor uso de memoria, dado
 que su funcionamiento de basa en el uso de accesos a la tabla.
 Y, por lo tanto, se genera una mayor eficiencia en la ejecución del algoritmo.
\end_layout

\begin_layout Itemize
Se verifica que el código realizado en Programación Dinámica es más eficiente
 que el código de fuerza bruta y memoizado.
 Esto se comprueba a partir de las pruebas realizadas y la obtención de
 mejores tiempos y resultados en la ejecución del código.
\end_layout

\begin_layout Subsection
Algoritmo Jarvis - March
\end_layout

\begin_layout Subsubsection
Pseudocódigo
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Jarvis Hull
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{jarvisHull}{Points}
\end_layout

\begin_layout Plain Layout


\backslash
If {|Points| $<$ 3}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return}
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
State hull $
\backslash
leftarrow$ []
\end_layout

\begin_layout Plain Layout


\backslash
State left $
\backslash
leftarrow$ 0
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 2$ $
\backslash
textbf(to)$ $|$Points$|$}
\end_layout

\begin_layout Plain Layout


\backslash
If {points[i].x $<$ points[left].x}
\end_layout

\begin_layout Plain Layout


\backslash
State left $
\backslash
leftarrow$ i
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State start $
\backslash
leftarrow$ left
\end_layout

\begin_layout Plain Layout


\backslash
While {true}
\end_layout

\begin_layout Plain Layout


\backslash
State hull.append(points[start])
\end_layout

\begin_layout Plain Layout


\backslash
State q $
\backslash
leftarrow$ (start $+$ 1) 
\backslash
% |Points|
\end_layout

\begin_layout Plain Layout


\backslash
For {i $
\backslash
leftarrow 1$ $
\backslash
textbf(to)$ |Points|}
\end_layout

\begin_layout Plain Layout


\backslash
If {pointOp(points[start], points[i], points[q]) $==$ 2}
\end_layout

\begin_layout Plain Layout


\backslash
State q $
\backslash
leftarrow$ i
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State start $
\backslash
leftarrow$ q
\end_layout

\begin_layout Plain Layout


\backslash
If {start $==$ left}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{break}
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} hull
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Procedure{pointOp}{p1, p2, p3}
\end_layout

\begin_layout Plain Layout


\backslash
State val $
\backslash
leftarrow$ (p2.y $-$ p1.y) $*$ (p3.x $-$ p2.x) $-$ (p2.x $-$ p1.x) $*$ (p3.y $-$
 p2.y)
\end_layout

\begin_layout Plain Layout


\backslash
If {val $==$ 0}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 0
\end_layout

\begin_layout Plain Layout


\backslash
ElsIf {val $>$ 0}
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 1
\end_layout

\begin_layout Plain Layout


\backslash
Else
\end_layout

\begin_layout Plain Layout


\backslash
State 
\backslash
textbf{return} 2
\end_layout

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Invariante
\end_layout

\begin_layout Paragraph*
Dado que es un algoritmo de Dynamic Programming, su invariante siempre será
 la misma, está consta de que, al realizar los cálculos y almacenarlos en
 una tabla con la información.
 Esto nos garantiza que, para realizar el cálculo del valor actual, ya se
 contará con los anteriores, por lo tanto se optimizará el tiempo de ejecución
 del código.
\end_layout

\begin_layout Subsubsection
Análisis de Complejidad
\end_layout

\begin_layout Subsubsection
Análisis de resultados
\end_layout

\begin_layout Itemize
En este caso particular, se obtiene una complejidad de 
\begin_inset Formula $O(n^{2})$
\end_inset

 tanto para el algoritmo de memoización como de Bottom-up.
 Sin embargo, por cuestión de optimización de recursos, es preferible el
 uso del código Bottom-up, puesto que, hace un menor uso de memoria, dado
 que su funcionamiento de basa en el uso de accesos a la tabla.
 Y, por lo tanto, se genera una mayor eficiencia en la ejecución del algoritmo.
\end_layout

\begin_layout Itemize
Se verifica que el código realizado en Programación Dinámica es más eficiente
 que el código de fuerza bruta y memoizado.
 Esto se comprueba a partir de las pruebas realizadas y la obtención de
 mejores tiempos y resultados en la ejecución del código.
\end_layout

\end_body
\end_document
